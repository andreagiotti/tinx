/*
	Name:	Asynchronous, parallel and sequential state machine with multiple exclusive resource management
	Author:	Andrea Giotti, 2020
	Release: 1.6
*/

define	numtasks = 8,
	numpos = 4,
	numres = 4,
	time_0 = 8,
	time_1 = 8,
	time_2 = 16,
	time_3 = 12;

input [false] random, reset;

iter(i on numtasks)
{
	input [false] run(i), abort(i);
	aux idle(i), refusal(i), wait(i), cycle(i);
	iter(h on 8)
		aux owned(i, h);

	iter(n on numres)
	{
		aux request(i, n), release(i, n), ack_request(i, n), lost_request(i, n), grant(i, n),
			perform(i, n), valid_request(i, n), general_request(i, n), delayed_request(i, n), pass(i, n);

		when(not i is 0)
			aux excl_bck(i, n);

		when(not i is numtasks - 1)
			aux excl_fwd(i, n);

		iter(j on numpos)
		{
			define k = numpos * n + j;

			aux queued(i, k), begin(i, k), up(i, k), down(i, k), new(i, k);

			when(j in 0 : numpos - 2)
				aux roll(i, k), full(i, k);
		}
	}
}

iter(n on numres)
{
	aux free(n);

	iter(j on numpos)
	{
		define k = numpos * n + j;

		aux freeslice(k);

		when(j in 0 : numpos - 2)
			aux noroll(k);
	}

	iter(h on 8)
		aux owner(n, h);
}

iter(h on 8)
	aux complete(h);

iter(h on 8)
{
	iter(l on 2)
	{
		output [packed, false] client_0(l, h), client_1(l, h), client_2(l, h), client_3(l, h), client_4(l, h), client_5(l, h), client_6(l, h), client_7(l, h);
		output [packed, false] resource_A(l, h), resource_B(l, h), resource_C(l, h), resource_D(l, h);
		output [packed, false] done(l, h);
	}

	iter(i on numtasks)
		aux num_string(i, h);

	iter(n on numres)
		aux alpha_string(n, h);

	iter(l on 2)
		aux sym_string(l, h);
}

aux working;
output [false] busy, error;

/* Mutually exclusive resources with queues */

iter(n on numres)
{
	free(n) == freeslice(numpos * n);

	iter(j on numpos)
	{
		define k = numpos * n + j;

		freeslice(k) == ~ exists(queued(i, k), i on numtasks);

		when(j in 0 : numpos - 2)
			noroll(k) == ~ exists(roll(i, k), i on numtasks);
	}
}

iter(i on numtasks)
{
	iter(n on numres)
	{
		define k0 = numpos * n;

		when(i is 0)
		{
			excl_fwd(0, n) == ~ general_request(0, n);
			pass(0, n) == random | (~ random & excl_bck(1, n));
		}
		else when(i is numtasks - 1)
		{
			excl_bck(numtasks - 1, n) == ~ general_request(numtasks - 1, n);
			pass(numtasks - 1, n) == (random & excl_fwd(numtasks - 2, n)) | ~ random;
		}
		else
		{
			excl_fwd(i, n) == excl_fwd(i - 1, n) & ~ general_request(i, n);
			excl_bck(i, n) == excl_bck(i + 1, n) & ~ general_request(i, n);
			pass(i, n) == (random & excl_fwd(i - 1, n)) | (~ random & excl_bck(i + 1, n));
		}

		delayed_request(i, n) == since(request(i, n) & ~ release(i, n) & ~ pass(i, n), ~ release(i, n) & ~ pass(i, n));

		general_request(i, n) == (request(i, n) | delayed_request(i, n) @ -1) & ~ release(i, n);
		valid_request(i, n) == general_request(i, n) & pass(i, n);

		ack_request(i, n) == exists(new(i, k), k in k0 : k0 + numpos - 1);
		lost_request(i, n) == valid_request(i, n) & ~ ack_request(i, n);

		iter(j on numpos)
		{
			define k = k0 + j;

			queued(i, k) == since(up(i, k) & ~ down(i, k), ~ down(i, k));

			begin(i, k) == freeslice(k) @ -1 & valid_request(i, n);

			when(j is numpos - 1)
			{
				new(i, k) == full(i, k - 1) @ -1 & begin(i, k);

				up(i, k) == new(i, k);
				down(i, k) == roll(i, k - 1) | release(i, n);
			}
			else
			{
				roll(i, k) == (freeslice(k) & queued(i, k + 1)) @ -1;

				when(j is 0)
				{
					new(i, k) == noroll(k) & begin(i, k);
					full(i, k) == ~ freeslice(k) & ~ queued(i, k);

					up(i, k) == roll(i, k) | new(i, k);
					down(i, k) == release(i, n);

					grant(i, n) == queued(i, k);
				}
				else
				{
					new(i, k) == full(i, k - 1) @ -1 & noroll(k) & begin(i, k);
					full(i, k) == full(i, k - 1) & ~ freeslice(k) & ~ queued(i, k);

					up(i, k) == roll(i, k) | new(i, k);
					down(i, k) == roll(i, k - 1) | release(i, n);
				}
			}
		}
	}
}

/* Sequential concurrent state machines */

iter(i on numtasks)
{
	iter(n on numres)
	{
		when(n is 0)
			request(i, n) == idle(i) @ -1 & run(i);
		else
			request(i, n) == release(i, n - 1);

		release(i, n) == perform(i, n) | abort(i) | reset;
	}

	idle(i) == since(release(i, numres - 1) | refusal(i), ~ ack_request(i, 0));

	refusal(i) == exists(lost_request(i, n), n on numres);
	wait(i) == ~ idle(i) & ~ exists(grant(i, n), n on numres);
	cycle(i) == perform(i, numres - 1);

	perform(i, 0) == grant(i, 0) @ [- time_0, 0);
	perform(i, 1) == grant(i, 1) @ [- time_1, 0);
	perform(i, 2) == grant(i, 2) @ [- time_2, 0);
	perform(i, 3) == grant(i, 3) @ [- time_3, 0);
}

working == ~ exists(cycle(i), i on numtasks);
busy == ~ forall(idle(i), i on numtasks);
error == exists(refusal(i), i on numtasks);

init random @ -1, reset @ -1;

/* Character input and output */

code(num_string, "01234567");
code(alpha_string, "ABCD");
code(sym_string, "-x");

iter(i on numtasks)
{
	idle(i) --> forall(owned(i, h) == sym_string(0, h), h on 8);
	wait(i) --> forall(owned(i, h) == sym_string(1, h), h on 8);

	iter(n on numres)
		grant(i, n) --> forall(owned(i, h) == alpha_string(n, h), h on 8);
}

iter(n on numres)
{
	free(n) --> forall(owner(n, h) == sym_string(0, h), h on 8);

	iter(i on numtasks)
		grant(i, n) --> forall(owner(n, h) == num_string(i, h), h on 8);
}

working --> forall(complete(h) == sym_string(0, h), h on 8);

iter(i on numtasks)
	cycle(i) --> forall(complete(h) == num_string(i, h), h on 8);

forall(client_0(0, h) == owned(0, h), h on 8);
forall(client_1(0, h) == owned(1, h), h on 8);
forall(client_2(0, h) == owned(2, h), h on 8);
forall(client_3(0, h) == owned(3, h), h on 8);
forall(client_4(0, h) == owned(4, h), h on 8);
forall(client_5(0, h) == owned(5, h), h on 8);
forall(client_6(0, h) == owned(6, h), h on 8);
forall(client_7(0, h) == owned(7, h), h on 8);

forall(resource_A(0, h) == owner(0, h), h on 8);
forall(resource_B(0, h) == owner(1, h), h on 8);
forall(resource_C(0, h) == owner(2, h), h on 8);
forall(resource_D(0, h) == owner(3, h), h on 8);

forall(done(0, h) == complete(h), h on 8);

forall(~ client_0(1, h), h on 8);
forall(~ client_1(1, h), h on 8);
forall(~ client_2(1, h), h on 8);
forall(~ client_3(1, h), h on 8);
forall(~ client_4(1, h), h on 8);
forall(~ client_5(1, h), h on 8);
forall(~ client_6(1, h), h on 8);
forall(~ client_7(1, h), h on 8);

forall(~ resource_A(1, h), h on 8);
forall(~ resource_B(1, h), h on 8);
forall(~ resource_C(1, h), h on 8);
forall(~ resource_D(1, h), h on 8);

forall(~ done(1, h), h on 8);


