/*
  Mutual exclusion system by Andrea Giotti, 2017-2018
  Release 2.1

  Four competitors gain exclusive access to one
  resource, which is granted to the one which
  is waiting for it or to nobody if all of them
  make their requests at the same time. The
  resource is released after a mininum time of
  8 steps and a maximum of 32.
*/

define number = 4, mintime = 8, maxtime = 32;

iter(number)
{
input req(^), rel(^);
output gnt(^);
aux beg(^), end(^), thr(^), sat(^);

init rel(^) @ -1, gnt(^) @ [- mintime, 0);

beg(^) == since(free @ -1 & ~ gnt(^) & one(req(^), ^, number), ~ gnt(^) & ~ rel(^));
end(^) == since(gnt(^) & rel(^), gnt(^) & ~ req(^));
gnt(^) == since((deny & beg(^)) @ -1, (~ end(^) @ -1 & sat(^)) | thr(^));
thr(^) == ~ gnt(^) ? [- mintime, 0);
sat(^) == exists(thr(^^) @ - ^ * mintime, maxtime / mintime);
}

aux free, deny;

free == ~ exists(beg(^), number);
deny == ~ exists(gnt(^), number);

