/*
	Name:	Resource management
	Author:	Andrea Giotti, 2018
	Release: 1.1

	Description:
	A mutually exclusive resource is granted to one task on <numtasks> while following requests
	are put in a queue of <numpos> positions. A release of the requested resource remove the
	request from the queue. The resource is granted for a minimum of <mintime> time units and a
	maximum of <maxtime> time units.
*/

define	numtasks = 4,
	numpos = 4,
	mintime = 8,
	maxtime = 32;

iter(numtasks)
{
	input req(^), rel(^);
	output gnt(^);
}

iter(numpos)
{
	aux free(^);
}

iter(numtasks)
{
	define i = ^;

	iter(numpos)
		{
			define	j = ^;

			aux queued(i, j), begin(i, j), end(i, j), up(i, j), down(i, j);

			queued(i, j) == since(up(i, j), ~ down(i, j));

			begin(i, j) == (free(j) & one(req(^) & ~ rel(^), i, numtasks)) @ -1;
			end(i, j) == (queued(i, j) & ~ req(i) & rel(i)) @ -1;
		}

	iter(numpos - 1)
		{
			define	j = ^;

			aux roll(i, j);

			roll(i, j) == (free(j) & queued(i, j + 1)) @ -1;
		}
}

iter(numpos)
{
	define	j = ^;

	init free(j) @ 0;

	free(j) == ~ exists(queued(^, j), numtasks);
}

iter(numtasks)
{
	define	i = ^;

	up(i, 0) == roll(i, 0) | (begin(i, 0) & ~ exists(roll(^, 0), numtasks));
	down(i, 0) == (end(i, 0) ? (- mintime, 0] & queued(i, 0) @ [- mintime, 0)) | queued(i, 0) @ [- maxtime, 0);

	gnt(i) == queued(i, 0);

	iter(numpos - 2)
		{
			define	j = ^ + 1;

			up(i, j) == roll(i, j) | (begin(i, j) & ~ exists(roll(^, j), numtasks) & ~ exists(queued(i, ^) | free(^), j));
			down(i, j) == roll(i, j - 1) | end(i, j);
		}

	up(i, numpos - 1) == begin(i, numpos - 1) & ~ exists(queued(i, ^) | free(^), numpos - 1);
	down(i, numpos - 1) == roll(i, numpos - 2) | end(i, numpos - 1);
}


