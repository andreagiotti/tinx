/*
	Name:	Resource management
	Author:	Andrea Giotti, 2018
	Release: 1.4

	Description:
	A mutually exclusive resource is granted to one task on <numtasks> while following requests
	are put in a queue of <numpos> positions. A release of the requested resource remove the
	request from the queue. The resource is granted for a minimum of <mintime> time units and a
	maximum of <maxtime> time units.
*/

define	numtasks = 4,
	numpos = 4,
	mintime = 8,
	maxtime = 32;

iter(i on numtasks)
{
	input req(i), rel(i);
	output gnt(i);

	iter(j on numpos)
			aux queued(i, j), begin(i, j), end(i, j), up(i, j), down(i, j);
}

iter(j on numpos)
{
	aux free(j);

	free(j) == ~ exists(queued(h, j), h on numtasks);
}

iter(i on numtasks)
	{
	iter(j on numpos)
		{
                        init ~ up(i, j) @ 0, down(i, j) @ 0;

			queued(i, j) == since(up(i, j), ~ down(i, j));

			begin(i, j) == (free(j) & one(req(h) & ~ rel(h), i, h on numtasks)) @ -1;
			end(i, j) == (queued(i, j) & ~ req(i) & rel(i)) @ -1;

			when(j in 0 : numpos - 2)
				{
					aux roll(i, j);

					roll(i, j) == (free(j) & queued(i, j + 1)) @ -1;
				}
		}
	}

iter(i on numtasks)
{
	up(i, 0) == roll(i, 0) | (begin(i, 0) & ~ exists(roll(h, 0), h on numtasks));
	down(i, 0) == (end(i, 0) ? (- mintime, 0] & queued(i, 0) @ [- mintime, 0)) | queued(i, 0) @ [- maxtime, 0);

	gnt(i) == queued(i, 0);

	iter(j in 1 : numpos - 2)
		{
			up(i, j) == roll(i, j) | (begin(i, j) & ~ exists(roll(h, j), h on numtasks) & ~ exists(queued(i, k) | free(k), k on j));
			down(i, j) == roll(i, j - 1) | end(i, j);
		}

	up(i, numpos - 1) == begin(i, numpos - 1) & ~ exists(queued(i, k) | free(k), k on numpos - 1);
	down(i, numpos - 1) == roll(i, numpos - 2) | end(i, numpos - 1);
}


